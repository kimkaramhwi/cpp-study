#include "config.h"

void main() {

// 문자열을 저장할 경우 문자열의 끝을 의미하는 NULL문자(\0)가 저장될 공간도 포함해서 크기를 잡아야 한다.
//	char name[] = { 'k','o','r','e','a','i','t','\0'};
// 문자 배열 선언시 초기치를 문자열로 지정하면 컴파일러가 자동으로 NULL문자(\0)를 붙여준다.
//	char name[] = "koreait";

//	char name[11];   //에러발생
// 문자열을 입력받을 경우 배열을 사용하면 메모리가 남거나 혹은 모자라거나 하는 현상이 생긴다.
// 이럴 경우 메모리의 낭비를 방지하기 위해 포인터로 입력을 받으면 된다. 하지만 포인터는 실제 데이터를 저장할 수 있는
// 메모리를 가지지 않고 주소를 저장하는 공간만 가진다. 따라서 저장할 데이터의 크기+1 만큼 메모리를 동적으로 할당하고
// 할당된 메모리의 시작 주소를 포인터에 넣어주면 입력이 가능해 진다.

	char *name = (char*)malloc(sizeof(char)*1 + 1);  //포인터를 받을 변수 = (자료형)malloc(할당받을 바이트 수)
	printf("이름을 입력하세요 : ");
	scanf_s("%s", name, sizeof(name)); 

//	for (int i = 0; name[i] != '\0'; i++) {
//		printf("name[%d] = %c\n", i, name[i]);   //영어이름을 넣으면 제대로 나오나 한글은 2byte이므로 제대로 나오지 않음

	for (int i = 0; name[i] != '\0'; i++) {    //왜 3글자만 나옴?....후
		printf("name[%d] = %c%c\n", i, name[i], name[i+1]);
		i++;
	}

	printf("===================================\n");
	printf("%s님 안녕하세요.\n", name);
	printf("===================================\n");

// 문자 배열에 "="을 사용해서 값을 넣어줄 수 있는 경우는 선언시만 가능하다.
	char data[8];
// 이미 선언된 문자 배열에 값을 넣을때는 strcpy() 함수를 사용한다.
//data = "academy";   //오류발생
	strcpy_s(data, "academy");
	for (int i = 0; data[i] != '\0'; i++) {
		printf("data[%d] = %c\n", i, data[i]);
	}
	printf("===================================\n");
}