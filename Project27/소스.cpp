#include "config.h"

void main() {

// 포인터는 선언시 붙여주는 자료형에 관계없이 무조건 4바이트의 크기를 가지는 컴파일러도 있다.
// 64bit의 운영체제에서 32bit로 컴파일 시 포인터변수의 크기는 4바이트, 64bit로 컴파일 시 8바이트
// 포인터는 포인터에 주소를 저장할 변수나 배열의 자료형으로 선언한다.
	int *p;
//	printf("포인터 p의 크기 : %d\n", sizeof(p));

	int data[] = { 100,200,300,400,500 };
	p = data;


	for (int i = 0; i < 5; i++) {
		printf("data[%d] = %d\n", i, data[i]);
	}
	printf("=======================================\n");

// 포인터를 배열처럼 사용할 수 있다.
	for (int i = 0; i < 5; i++) {
		printf("p[%d] = %d\n", i, p[i]);
	}
	printf("=======================================\n");

	printf("data[0]이 메모리에 생성된 주소 : %d\n", &data[0]);
	printf("=======================================\n");

// 포인터 연산
// 포인터의 연산은 덧셈과 뺄셈만 가능하다. 단순히 1씩 더해지고 빼지는 것이 아니고 연산되는 값에 포인터 자료형의 크기가 곱해진 만큼 커지고 작아진다.
// 포인터 변수의 크기가 4이든 8이든 그것과는 상관없다. 자료형의 크기와 연관

	for (int i = 0; i < 5; i++) {
		printf("data[%d] = %d\n", i, p + i);
	}
	printf("=======================================\n");

	for (int i = 0; i < 5; i++) {
		printf("data[%d] = %d\n", i, *(p + i));
	}
	printf("=======================================\n");

	for (int i = 0; i < 5; i++) {
		printf("data[%d] = %d\n", i, *p + i);
	}
	printf("=======================================\n");

	int* a = (int *)malloc(sizeof(int) * 5);     //이렇게 선언해서 배열처럼 쓴거임 아니면 위 방식들처럼 입력해야함.
}